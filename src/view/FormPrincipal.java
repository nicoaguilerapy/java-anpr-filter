/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import controller.DB;
import java.awt.Component;
import java.awt.Font;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.ImageIcon;
import javax.swing.JCheckBox;
import javax.swing.JLabel;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableModel;

/**
 *
 * @author BATMAN
 */
public class FormPrincipal extends javax.swing.JFrame {

    /**
     * Creates new form FormPrincipal
     */
    public FormPrincipal() {
        initComponents();
        initForm();
        this.setLocationRelativeTo(null);
        this.setTitle("HERRAMIENTA PARA VALIDACION DE SISTEMA ANPR");
    }

    public Date getDate() {
        Date date = new java.util.Date();
        return date;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        dateInicio = new com.toedter.calendar.JDateChooser("dd/MM/yyyy","##/##/####", '_');
        dateFinal = new com.toedter.calendar.JDateChooser("dd/MM/yyyy","##/##/####", '_');
        cmbVideo = new javax.swing.JComboBox<>();
        btnBuscar = new javax.swing.JButton();
        cmbCorrecto = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        txtCantTotal = new javax.swing.JTextField();
        txtCantCorrecto = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtPorcentaje = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        dateInicio.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 51, 255)));
        dateInicio.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        dateFinal.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 51, 255)));
        dateFinal.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        cmbVideo.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        cmbVideo.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 51, 255)));

        btnBuscar.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnBuscar.setText("BUSCAR");
        btnBuscar.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });

        cmbCorrecto.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        cmbCorrecto.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Todos", "Correctos", "Incorrectos" }));
        cmbCorrecto.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 51, 255)));

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel1.setText("Cantidad Total:");

        txtCantTotal.setEditable(false);
        txtCantTotal.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        txtCantTotal.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153)));

        txtCantCorrecto.setEditable(false);
        txtCantCorrecto.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        txtCantCorrecto.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153)));

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel2.setText("Cantidad Total:");

        txtPorcentaje.setEditable(false);
        txtPorcentaje.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        txtPorcentaje.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153)));

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel3.setText("Porcentaje:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addContainerGap())
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtCantTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(57, 57, 57)
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtCantCorrecto, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtPorcentaje, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addComponent(dateInicio, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(69, 69, 69)
                                .addComponent(dateFinal, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(35, 35, 35)
                                .addComponent(cmbVideo, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(cmbCorrecto, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 57, Short.MAX_VALUE)
                        .addComponent(btnBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(70, 70, 70))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(dateInicio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dateFinal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(cmbVideo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnBuscar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(cmbCorrecto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(32, 32, 32)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtCantTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(txtCantCorrecto, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(txtPorcentaje, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 485, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed
        filter();
    }//GEN-LAST:event_btnBuscarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FormPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FormPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FormPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FormPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FormPrincipal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBuscar;
    private javax.swing.JComboBox<String> cmbCorrecto;
    private javax.swing.JComboBox<String> cmbVideo;
    private com.toedter.calendar.JDateChooser dateFinal;
    private com.toedter.calendar.JDateChooser dateInicio;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField txtCantCorrecto;
    private javax.swing.JTextField txtCantTotal;
    private javax.swing.JTextField txtPorcentaje;
    // End of variables declaration//GEN-END:variables

    private void initForm() {
        initTable();
        init();
    }

    private JTable table;
    private DefaultTableModel model;
    private SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy HH:mm");

    private void initTable() {
        // Define las columnas
        String[] columnNames = {"ID", "IMAGEN", "MATRICULA", "MOVIMIENTO", "HORA Y FECHA", "VIDEO", "CORRECTO"};
        model = new DefaultTableModel(columnNames, 0) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false; // Hace que ninguna celda sea editable
            }
        };

        table = new JTable(model);
        table.setFont(new Font("Arial", Font.PLAIN, 18));
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment(DefaultTableCellRenderer.CENTER);
        table.setDefaultRenderer(Object.class, centerRenderer);
        table.getColumnModel().getColumn(1).setCellRenderer(new ImageTableCellRenderer());
        table.getColumnModel().getColumn(6).setCellRenderer(new BooleanTableCellRenderer());
        table.setRowHeight(100);
        table.addKeyListener(new KeyListener() {
            @Override
            public void keyTyped(KeyEvent e) {
                // No necesitas implementar esto
            }

            @Override
            public void keyPressed(KeyEvent e) {
                if (e.getKeyCode() == KeyEvent.VK_SPACE) {
                    // Detecta cuando se presiona la barra espaciadora
                    changeIsCorrect();
                }
            }

            @Override
            public void keyReleased(KeyEvent e) {
                // No necesitas implementar esto
            }

        });

        // Agrega la tabla al JScrollPane
        jScrollPane1.setViewportView(table);
    }

    private void changeIsCorrect() {
        int selectedRow = table.getSelectedRow();

        if (selectedRow >= 0) {
            String sql = "update registros SET reg_correcto = CASE\n"
                    + "    WHEN reg_correcto = true THEN false\n"
                    + "    ELSE true\n"
                    + "END where reg_id=" + table.getValueAt(table.getSelectedRow(), 0).toString();
            if (DB.executeUpdate(sql)) {
                boolean currentValue = (boolean) table.getValueAt(selectedRow, 6);

                // Invierte el valor
                boolean newValue = !currentValue;

                // Establece el nuevo valor en la celda
                table.setValueAt(newValue, selectedRow, 6);

                // Notifica a la tabla que los datos han cambiado
                ((DefaultTableModel) table.getModel()).fireTableCellUpdated(selectedRow, 6);
                double totalRows = model.getRowCount();
                double cantCorrecto = Double.parseDouble(txtCantCorrecto.getText());

                if (newValue) {
                    cantCorrecto += 1;
                } else {
                    cantCorrecto -= 1;
                }

                txtCantCorrecto.setText(formatDouble(cantCorrecto));
                txtPorcentaje.setText(formatDouble((cantCorrecto / totalRows) * 100));

            }            // Obtiene el valor actual de la columna de booleanos (supongamos que está en la columna 6)
        }

    }

    private void init() {
        dateInicio.setDate(getDate());
        dateFinal.setDate(getDate());
        try {
            cmbVideo.addItem("Todos");
            String sql = "SELECT DISTINCT TRIM(reg_video) video FROM registros;";
            DB.executeQuery(sql);
            while (DB.getResulset().next()) {
                cmbVideo.addItem(DB.getResulset().getString("video"));
            }
        } catch (Exception e) {
        }
    }

    private void filter() {
        clearTable(table);
        double cantCorrecto = 0;
        try {
            SimpleDateFormat sqlDateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
            String fechaInicialStr = sqlDateFormat.format(dateInicio.getDate());
            String fechaFinalStr = sqlDateFormat.format(dateFinal.getDate());

            String sql = "SELECT * FROM registros WHERE reg_fecha BETWEEN '" + fechaInicialStr + "' AND '" + fechaFinalStr + "' "
                    + (cmbVideo.getSelectedIndex() > 0 ? " and reg_video='" + cmbVideo.getSelectedItem().toString() + "'" : "")
                    + (cmbCorrecto.getSelectedIndex() > 0 ? (cmbCorrecto.getSelectedIndex() == 1 ? " and reg_correcto" : " and not reg_correcto") : "")
                    + " order by reg_id";
            DB.executeQuery(sql);
            // Aquí realizar la consulta a la base de datos y obtener los resultados
            // Supongamos que tienes los resultados en un ResultSet llamado DB.getResulset()

            while (DB.getResulset().next()) {
                int id = DB.getResulset().getInt("reg_id");
                String imagenPath = "img/" + DB.getResulset().getString("reg_imagen");
                ImageIcon imagen = new ImageIcon(imagenPath);
                String matricula = DB.getResulset().getString("reg_placa");
                String movimiento = DB.getResulset().getString("reg_movimiento");
                String video = DB.getResulset().getString("reg_video");
                String fecha = dateFormat.format(DB.getResulset().getTimestamp("reg_fecha"));
                boolean correcto = DB.getResulset().getBoolean("reg_correcto");
                cantCorrecto += (correcto ? 1 : 0);
                Object[] rowData = {id, imagen, matricula, movimiento, fecha, video, correcto};
                model.addRow(rowData);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        txtCantTotal.setText(formatDouble(model.getRowCount()));
        txtCantCorrecto.setText(formatDouble(cantCorrecto));
        txtPorcentaje.setText(formatDouble((cantCorrecto / model.getRowCount()) * 100));
    }

    public static String formatDouble(double value) {
        DecimalFormat df = new DecimalFormat("0.00");
        return df.format(value);
    }

    public void clearTable(JTable table) {
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        model.setRowCount(0); // Establece el número de filas en 0 para eliminar todas las líneas.
    }

    public class ImageTableCellRenderer extends DefaultTableCellRenderer {

        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
            if (value instanceof ImageIcon) {
                JLabel label = new JLabel((ImageIcon) value);
                label.setHorizontalAlignment(JLabel.CENTER);

                // Ajusta la altura de la fila según la altura de la imagen
                ImageIcon icon = (ImageIcon) value;
                int imageHeight = icon.getIconHeight();
                if (table.getRowHeight(row) != imageHeight) {
                    table.setRowHeight(row, imageHeight);
                }

                return label;
            } else {
                return super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
            }
        }
    }

    class BooleanTableCellRenderer extends JCheckBox implements TableCellRenderer {

        public BooleanTableCellRenderer() {
            setHorizontalAlignment(JLabel.CENTER); // Establece la alineación de la etiqueta de texto
            setOpaque(true); // Asegura que el fondo se pinte correctamente
        }

        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
            if (value instanceof Boolean) {
                setSelected((Boolean) value);
            }
            return this;
        }
    }

}
